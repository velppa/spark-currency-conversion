#+TITLE: Currency conversion using Spark

* Understanding the problem

The challenge is to convert amount values for incoming incoming
transactions from transaction's currency to USD.

The conversion is a multiplication operation =amount_usd = amount *
rate_curr_usd=.

There are those constraints to care about:
1. Use a monthly updating FX rate based on the timestamp of each
   transaction.
2. The conversion should work for real-time (<50 ms) as well as batch
   (> 100M rows) transactions.
3. The real-time and batch conversion function should be identical,
   i.e. same inputs produce same outputs.

* Create a plan

Obtaining exchange rates from third parties should be independent
from using those rates in transaction processing. At this stage
we ensure the data quality, reshape rates into our internal model
and establish validity intervals along the time axis.

#+begin_src dot :file assets/flow.svg :exports results

digraph CurrencyConversion {
{
  RatesStorage [shape=cylinder]
  TransactionsDump [shape=cylinder]
  TransactionsEnriched [shape=cylinder]

  RatesLoader [shape=component]
  BulkTransactionProcessing [shape=component]
  StreamingTransactionProcessing [shape=component]
}

FXRatesProvider -> RatesLoader -> RatesStorage

TransactionsDump -> BulkTransactionProcessing
RatesStorage -> BulkTransactionProcessing
BulkTransactionProcessing -> TransactionsEnriched

TransactionStream -> StreamingTransactionProcessing
RatesStorage -> StreamingTransactionProcessing

StreamingTransactionProcessing -> TrasnactionsTopic
}

#+end_src

#+RESULTS:
[[file:assets/flow.svg]]

** Loading exchange rates

Exchange rates are loaded from an external provider at some infrequent
schedule (say every month), reshaped to our model and stored somewhere
durably. The easiest way is to use cloud object storage service like
Amazon S3.

The file would contain exchange rates from a currency to some base
currency like USD or EUR for a few hundreds of currencies.

Exchange rates should be updated at some interval, in the requirements
it's said to use monthly updating rate, but months are somewhat tricky
to use since they contain different number of days and February has
variadic length, and also the requirements might change to update rates
more often, so assume that rates would be updated at some fixed interval
in seconds like 4 weeks:

#+begin_src calc :exports both
4 * 7 * 24 * 60 * 60
#+end_src

#+RESULTS:
: 2419200

We can estimate the

Then the process which does currency exchange rates conversion loads
the whole file in memory.

#+begin_src restclient
:api-key := (getenv "CURRENCYLAYER_API_KEY")
GET http://api.currencylayer.com/live?access_key=:api-key
#+end_src


** Commands

See defined tasks:
#+begin_src sh
sbt tasks
#+end_src


* Carry out the plan

* Look back
